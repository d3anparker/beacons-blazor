@page "/beacon/{beaconId:guid}"
@using Beacons.Models
@using Humanizer

<h3>Beacon</h3>

@if (_beacon is null)
{
    <div>
        No beacon active at this address. Check the beacon address you've been given. It may have expired.
    </div>
}
else
{
    <div>
        Active beacon: Lat: @_beacon.Coords.Latitude, Long: @_beacon.Coords.Longitude
    </div>


    @if (_model.CurrentPosition is null)
    {
        <div>
            Current position unknown.
        </div>
    }
    else
    {
        <div class="mb-3">
            Current position is: Lat: @_model.CurrentPosition.Coords.Latitude, Long: @_model.CurrentPosition.Coords.Longitude
        </div>

        <div class="mb-3">
            Distance to target is @_model.CurrentDistanceDescription (accuracy: (@_model.CurrentDistance?.Accuracy.ToMetric()))
        </div>
        <div class="mb-3">
            <input type="radio" class="btn-check" name="options" id="option1"
                autocomplete="off"
                checked="@(_model.CurrentUnit == DistanceUnit.Metric)"
                @onchange="ChangeUnit"
                value="@((int)DistanceUnit.Metric)">
            <label class="btn btn-primary" for="option1">KM</label>

            <input type="radio" class="btn-check" name="options" id="option2"
                autocomplete="off"
                checked="@(_model.CurrentUnit == DistanceUnit.Imperial)"
                @onchange="ChangeUnit"
                value="@((int)DistanceUnit.Imperial)">
            <label class="btn btn-primary" for="option2">Miles</label>
        </div>        

        @if (_model.Watching)
        {
            <button class="button" @onclick="() => StopWatchAsync()">Stop watching</button>
        }
        else
        {
            <button class="button" @onclick="() => StartWatchAsync()">Start watching</button>
        }
    }
}