@using System.Reactive.Subjects
@using System.Reactive.Linq;
@implements IDisposable;
@inject IJSRuntime JsRuntime;

<div id="@MapId" class="map">
</div>

@code {
    [Parameter]
    public string MapId { get; set; } = Guid.NewGuid().ToString();
    [Parameter]
    public double Longtitude { get; set; } = 0.0;
    [Parameter]
    public double Latitude { get; set; } = 0.0;

    private ISubject<int?> _refreshMap;
    private IDisposable? _mapRefreshSubscription;

    public Map()
    {
        _refreshMap = new BehaviorSubject<int?>(null);
    }

    protected override async Task OnInitializedAsync()
    {
        var module = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/main.js");
        var map = await module.InvokeAsync<IJSObjectReference>("createMap", MapId);

        _mapRefreshSubscription = _refreshMap.Sample(TimeSpan.FromSeconds(5)) // Only accept a new position every five seconds.
            .Select(s => Observable.FromAsync(async () => await UpdateMapAsync(map)))
            .Concat()
            .Subscribe();

        await UpdateMapAsync(map);
        await base.OnInitializedAsync();
    }

    public void Dispose()
    {
        _mapRefreshSubscription?.Dispose();
    }

    protected override void OnParametersSet()
    {
        _refreshMap?.OnNext(null);
    }

    private async Task UpdateMapAsync(IJSObjectReference map)
    {
        await map.InvokeVoidAsync("updateMap", Latitude, Longtitude);
        StateHasChanged();
    }
}
